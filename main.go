package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"time"
	"unicode/utf8"

	"github.com/anatoliyfedorenko/isdayoff"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
	"github.com/robfig/cron/v3"
)

type Reminder struct {
	Time    string `json:"time"`    // –í —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
	Message string `json:"message"` // HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ
}

var loc *time.Location

func mustEnv(key string) string {
	val := os.Getenv(key)
	if val == "" {
		log.Fatalf("‚õî –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è %s –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", key)
	}
	return val
}

func mustParseInt64(s string) int64 {
	var id int64
	_, err := fmt.Sscanf(s, "%d", &id)
	if err != nil {
		log.Fatalf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞: %s", s)
	}
	return id
}

func loadReminders(path string) ([]Reminder, error) {
	data, err := os.ReadFile(path)
	if err != nil {
		return nil, err
	}
	var reminders []Reminder
	if err := json.Unmarshal(data, &reminders); err != nil {
		return nil, err
	}
	return reminders, nil
}

func isWeekend() bool {
	now := time.Now().In(loc)

	dayOff := isdayoff.New()
	countryCode := isdayoff.CountryCodeRussia
	pre, covid := false, false
	year, month, day := now.Date()
	params := isdayoff.Params{
		CountryCode: &countryCode,
		Pre:         &pre,
		Covid:       &covid,
		Year:        year,
		Month:       &month,
		Day:         &day,
	}
	dayType, err := dayOff.Today(params)

	if err != nil || dayType == nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π: %v", err)
		return false // –ª—É—á—à–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
	}

	return *dayType == isdayoff.DayTypeNonWorking
}

func truncate(s string, limit int) string {
	if utf8.RuneCountInString(s) <= limit {
		return s
	}
	runes := []rune(s)
	return string(runes[:limit])
}

func parseHourMinute(timeStr string) (hour, minute int, err error) {
	_, err = fmt.Sscanf(timeStr, "%d:%d", &hour, &minute)
	if err != nil {
		return
	}
	if hour < 0 || hour > 23 || minute < 0 || minute > 59 {
		err = fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: %s", timeStr)
	}
	return
}

func createCronJob(c *cron.Cron, r Reminder, bot *tgbotapi.BotAPI, chatID int64) error {
	hour, minute, err := parseHourMinute(r.Time)
	if err != nil {
		return err
	}

	// Cron —Ñ–æ—Ä–º–∞—Ç: MIN HOUR * * *
	cronExpr := fmt.Sprintf("%d %d * * *", minute, hour)

	handler := func() {
		if isWeekend() {
			log.Printf("üèñ [%s] –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", r.Time)
			return
		}

		msg := tgbotapi.NewMessage(chatID, r.Message)
		msg.ParseMode = "HTML"
		if _, err := bot.Send(msg); err != nil {
			log.Printf("‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ [%s]: %v", r.Time, err)
		} else {
			log.Printf("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ [%s]: %s", r.Time, truncate(r.Message, 20))
		}
	}

	entryID, err := c.AddFunc(cronExpr, handler)
	if err == nil {
		log.Printf("‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞ –≤—Ä–µ–º—è %s –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ ID: [%d]", r.Time, entryID)
	}

	return err
}

func main() {
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é")
	}

	botToken := mustEnv("BOT_TOKEN")
	groupChatID := mustEnv("GROUP_CHAT_ID")
	reminderPath := mustEnv("REMINDERS_FILE")
	timezone := mustEnv("TIMEZONE")

	chatID := mustParseInt64(groupChatID)

	var err error
	loc, err = time.LoadLocation(timezone)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: %v", err)
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %v", err)
	}
	log.Printf("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @%s", bot.Self.UserName)

	reminders, err := loadReminders(reminderPath)
	if err != nil {
		log.Fatalf("‚ùå –ù–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: %v", err)
	}
	if len(reminders) == 0 {
		log.Fatalf("‚ùå –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –∑–∞–ø—É—Å–∫–∞—Ç—å")
	}

	c := cron.New(cron.WithLocation(loc))

	for _, r := range reminders {
		if err := createCronJob(c, r, bot, chatID); err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ [%s]: %v", r.Time, err)
		}
	}

	c.Start()
	log.Println("üìÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É")

	select {} // –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ main –ø–æ—Ç–æ–∫–∞
}
